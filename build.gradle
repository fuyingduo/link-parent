buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/content/groups/public/' }
        maven { url 'https://repository.jboss.org/nexus/content/groups/public/' }
        maven { url 'https://mirrors.ibiblio.org/pub/mirrors.maven2/' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

configure(allprojects) { project ->
    group = "org.custom"
    version = version

    ext.springBootVersion       = '2.0.3.RELEASE'
    ext.springCloudVersion      = 'Finchley.RELEASE'
    ext.springDataVersion       = '2.0.8.RELEASE'
    ext.guavaVersion            = '21.0'
    ext.zipkinVersion           = '2.11.8'
    ext.logstashVersion         = '4.11'
    ext.jwtVersion              = '0.7.0'
    ext.fastjsonVersion         = '1.2.28'
    ext.mysqlVersion            = '8.0.13'
    ext.druidVersion            = '1.1.10'
    ext.mybatisVersion          = '1.3.2'
    ext.jacksonVersion          = '2.9.8'
    ext.swaggerVersion          = '2.9.2'
    ext.commonsVersion          = '1.10'
    ext.embedVersion            = '8.5.31'
    ext.druidVersion            = '1.1.12'
    ext.springContextVersion    = '5.0.7.RELEASE'
    ext.okhttp3Version          = '4.0.1'
    ext.poiVersion              = '4.0.0'
    ext.lang3Version            = '3.7'
    ext.commonsIoVersion        = '2.4'

    apply plugin: "java"
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'io.spring.dependency-management'

    if (!(name.contains('common'))) {
        apply plugin: 'org.springframework.boot'
    }

    repositories {
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        mavenCentral()
        jcenter()

    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
    
    dependencies {
        if (!name.contains("common-server")) {
            compile "org.springframework.boot:spring-boot-configuration-processor"
        }
    }
    compileJava.dependsOn(processResources)

    task copyTestResources(type: Copy) {
        from "${projectDir}/src/test/resources"
        into "${buildDir}/classes/test"
    }
    processTestResources.dependsOn copyTestResources

}

project("common-server") {
    description = "common-server"

    dependencies {
        compile("com.google.guava:guava:${guavaVersion}")
        compile("io.jsonwebtoken:jjwt:${jwtVersion}")
        compile("com.alibaba:fastjson:${fastjsonVersion}")
        compile("commons-codec:commons-codec:${commonsVersion}")
        compile("org.springframework.data:spring-data-commons:${springDataVersion}")
        compile("org.apache.tomcat.embed:tomcat-embed-core:${embedVersion}")
        compile("org.springframework:spring-context:${springContextVersion}")
        implementation("com.squareup.okhttp3:okhttp:${okhttp3Version}")
        compile("org.apache.poi:poi-ooxml:${poiVersion}")
        compile("org.apache.commons:commons-lang3:${lang3Version}")
        compile("commons-io:commons-io:${commonsIoVersion}")
        compile("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
        compile("org.springframework:spring-web:${springContextVersion}")
        compileOnly("javax.servlet:servlet-api:2.5")
    }
}

project("eureka-server") {
    description = "eureka-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server")
        compile("de.codecentric:spring-boot-admin-starter-client:2.0.3")
        compile("org.springframework.boot:spring-boot-starter-security")
    }
}

project("zipkin-server") {
    description = "zipkin-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("io.zipkin.java:zipkin-server:${zipkinVersion}")
                {
                    exclude group: 'log4j'
                    exclude group: 'org.slf4j'
                }

        compile("io.zipkin.java:zipkin-autoconfigure-ui:${zipkinVersion}")
    }
}

project("zuul-server") {
    description = "zuul-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-zuul")
        compile("io.springfox:springfox-swagger2:${swaggerVersion}")
        compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
        compile(project(":common-server"))
    }
}

project("user-server") {
    description = "user-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
        compile("org.springframework.cloud:spring-cloud-config-client")
        compile("net.logstash.logback:logstash-logback-encoder:${logstashVersion}")
        compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        runtime("mysql:mysql-connector-java")
        compile("com.alibaba:druid:${druidVersion}")
        compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-redis")
        compile("io.springfox:springfox-swagger2:${swaggerVersion}")
        compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard")
        compile("org.springframework.boot:spring-boot-starter-webflux")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("de.codecentric:spring-boot-admin-starter-client:2.0.3")
        runtime("org.springframework.boot:spring-boot-devtools")
        implementation("org.springframework.kafka:spring-kafka")
        compile(project(":common-server"))
    }
}

project("file-server") {
    description = "file-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
        compile("net.logstash.logback:logstash-logback-encoder:${logstashVersion}")
        compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        compile("net.sourceforge.jexcelapi:jxl:2.6.12")
        compile(project(":common-server"))
    }
}

project("config-server") {
    description = "config-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.boot:spring-boot-starter-jdbc")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("org.springframework.cloud:spring-cloud-config-server")
        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
        compile("mysql:mysql-connector-java")
        compile("net.logstash.logback:logstash-logback-encoder:${logstashVersion}")
        compile(project(":common-server"))
    }
}

project("auth-server") {
    description = "auth-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile(project(":common-server"))
    }
}


project("schedule-server") {
    description = "schedule-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("io.springfox:springfox-swagger2:${swaggerVersion}")
        compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-redis")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        runtime("mysql:mysql-connector-java")
        compile("com.alibaba:druid:${druidVersion}")
        compile(project(":common-server"))
    }
}

project("amqp-server") {
    description = "amqp-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.boot:spring-boot-starter-amqp")
        compile(project(":common-server"))
    }
}

project("payment-server") {
    description = "payment-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        compile(project(":common-server"))
    }
}

project("product-server") {
    description = "product-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
        compile("org.springframework.cloud:spring-cloud-config-client")
        compile("net.logstash.logback:logstash-logback-encoder:${logstashVersion}")
        compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        runtime("mysql:mysql-connector-java")
        compile("com.alibaba:druid:${druidVersion}")
        compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-redis")
        compile("io.springfox:springfox-swagger2:${swaggerVersion}")
        compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-ribbon")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard")
        compile("org.springframework.boot:spring-boot-starter-webflux")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("de.codecentric:spring-boot-admin-starter-client:2.0.3")
        compile(project(":common-server"))
    }
}

project("admin-server") {

    description = "admin-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("de.codecentric:spring-boot-admin-starter-server:2.0.3")
        compile("de.codecentric:spring-boot-admin-server-ui:2.0.3")
        compile("org.springframework.boot:spring-boot-starter-mail")
        compile("org.jolokia:jolokia-core")
        compile("org.springframework.boot:spring-boot-starter-security")
    }
}


