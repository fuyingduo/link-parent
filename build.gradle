import org.springframework.boot.gradle.plugin.SpringBootPlugin
import com.bmuschko.gradle.docker.tasks.image.*

/**
 *          ,.-·~ ^~,      .-,             ,'´¨';'        ,-·-.          ,'´¨;        ;'*¨'`·- .,  
 *       .'´  ,.-·~-.,':\     ;  ';\          ,'   ';'\'      ';   ';\      ,'´  ,':\'      \`:·-,. ,   '` ·.  '
 *      ;   ,':\::::::'\::\   ';   ;:'\        ,'   ,'::'\      ;   ';:\   .'   ,'´::'\'      '\:/   ;\:'`:·,  '`·, '
 *     ;'   ;:::'_-·~-\;'   ';  ';::';      ,'   ,'::::;      '\   ';::;'´  ,'´::::;'        ;   ;'::\;::::';   ;\
 *   ,.'    'ª*'´ __'`;\ °   ';  ';::;     ,'   ,'::::;'         \  '·:'  ,'´:::::;' '        ;  ,':::;  `·:;;  ,':'\'
 *   `',   ;\¯::::::::\:\   ';  ';::;    ,'   ,'::::;'           '·,   ,'::::::;'´         ;   ;:::;    ,·' ,·':::;
 *    ;   ;::\;::_:_::\;'    \   '·:_,'´.;   ;::::;            ,'  /::::::;'  '         ;  ;:::;'  ,.'´,·´:::::;
 *    ;  ';:::;        '        \·,   ,.·´:';  ';:::';           ,´  ';\::::;'  '          ':,·:;::-·´,.·´\:::::;´'
 *    ';  ;::';                  \:\¯\:::::\`*´\::;  '         \`*ª'´\\::/              \::;. -·´:::::;\;·´
 *     \*´\:';        '           `'\::\;:·´'\:::'\'   '          '\:::::\';  '              \;'\::::::::;·´'
 *      '\::\;     '                           `*´°               `*ª'´                     `\;::-·´
 *        `*´                                 '                    '
 */

buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'https://repo.spring.io/libs-snapshot' }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

/**
 * ===================================================================================================================
 * -------------------------------------------       插件管理         ----------------------------------------------
 * ===================================================================================================================
 */
plugins {
    id "com.bmuschko.docker-java-application" version "3.3.6"   //通过其远程API管理Docker镜像和容器.
    id "com.bmuschko.docker-remote-api" version "3.3.6"         //Gradle插件,通过其远程API管理Docker镜像和容器.
}

/**
 * ===================================================================================================================
 * -------------------------------------------       引入项目插件         ----------------------------------------------
 * ===================================================================================================================
 */
configure(allprojects) { project ->

    // 基本属性
    group = "org.custom"
    version = "0.0.1-SNAPSHOT"

    // 引入插件
    apply plugin: "java"
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'application'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'com.bmuschko.docker-java-application'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    // JDK版本声明
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // 配置仓库
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'https://repo.spring.io/libs-snapshot' }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    //指定项目编码
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    //在多模块下,授权打包依赖模块
    jar {
        enabled = true
    }

    //重打包基础配置
    bootJar {
        launchScript()
        archiveName = "${project.group}_${project.name}_${project.version}.jar"
    }

    // 依赖版本号
    ext.springBootVersion = '2.0.3.RELEASE'
    ext.springCloudVersion = 'Finchley.RELEASE'
    ext.springDataVersion = '2.0.8.RELEASE'
    ext.guavaVersion = '21.0'
    ext.zipkinVersion = '2.11.8'
    ext.logstashVersion = '4.11'
    ext.jwtVersion = '0.7.0'
    ext.fastjsonVersion = '1.2.28'
    ext.mysqlVersion = '8.0.13'
    ext.druidVersion = '1.1.10'
    ext.mybatisVersion = '1.3.2'
    ext.jacksonVersion = '2.9.8'
    ext.swaggerVersion = '2.9.2'
    ext.commonsVersion = '1.10'
    ext.embedVersion = '8.5.31'
    ext.druidVersion = '1.1.12'
    ext.springContextVersion = '5.0.7.RELEASE'
    ext.okhttp3Version = '4.0.1'
    ext.poiVersion = '4.0.0'
    ext.lang3Version = '3.7'
    ext.commonsIoVersion = '2.4'
}

/**
 * ===================================================================================================================
 * -------------------------------------------      所有子项目的通用配置     ---------------------------------------------
 * ===================================================================================================================
 */
configure(subprojects) { project ->

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
    dependencies {
        if (!name.contains("common-server")) {
            compile "org.springframework.boot:spring-boot-configuration-processor"
            testCompile("junit:junit:4.12")
        }
    }
    compileJava.dependsOn(processResources)
}

/**
 * ===================================================================================================================
 * -------------------------------------------      docker相关配置        ---------------------------------------------
 * ===================================================================================================================
 */
configure(subprojects) {
    project ->


        // Dockerfile文件存放地址
        String dockerFileDir = 'build/docker'

        //docker文件
        String dockFilePath = "${dockerFileDir}/Dockerfile"

        docker {
            url = 'tcp://192.168.1.210:2375'
            registryCredentials {
                url = 'http://docker_engine'
                username = 'fuyingduo'
                password = 'mimagaosuni0'
            }
        }

        task cleanDocker(type: Delete) {
            delete fileTree("${buildDir}/docker") {
                include '**/*'
            }
        }
        task copyBuild(type: Copy, dependsOn: build) {
            dependsOn cleanDocker
            from "build/libs/${project.getName()}-${version}.jar"
            into 'build/docker'
        }
        task copyScript(type: Copy, dependsOn: copyBuild) {
            from project.file("${buildDir}/resources/main/script")
            into project.file("${buildDir}/docker/script")
        }

        task createDockerFile(type: Dockerfile) {
            //指定脚本分组
            group = "docker"
            //脚本依赖 build任务
            dependsOn build
            //指定生成的Dockerfile所处的位置.
            destFile = project.file(dockFilePath)
            //指定依赖的基础镜像
            from 'openjdk:8-jdk-alpine'
            //指定作者信息,但是盖指令在较新的版本中已经被遗弃了,推荐使用label命令.
            maintainer 'weoil "xxx@qq.com"'
            //指定挂载目录
            volume "/tmp"
            //扩展标签
            label(['author': 'weoil', 'email': 'xxx@qq.com'])
            //添加参数
            arg "JAR_FILE"
            //编译时将jar包保存进去
            copyFile('${JAR_FILE}', "${project.getName()}-${version}.jar")
            //指定脚本执行命令
            entryPoint("java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/${project.getName()}-${version}.jar")
        }

        /**
         * 构建基础镜像
         */
        task image(type: DockerBuildImage) {
            group = 'docker'
            dependsOn createDockerFile
            //指定Dockerfile文件
            inputDir = project.file("build/docker")
            dockerFile = project.file(dockFilePath)
            //标签
            tag = "${project.name}:${project.version}"

            //指定在执行build命令时,使用的构建参数.
            buildArgs = ["JAR_FILE": "${bootJar.archiveName}"]

            /**
             * 在构建容器前,将jar包和Dockerfile放置到同一目录下.
             */
            doFirst {
                copy {
                    from bootJar
                    into "${project.buildDir}/docker"
                }
            }
        }
}

project("common-server") {
    description = "common-server"

    dependencies {
        compile("com.google.guava:guava:${guavaVersion}")
        compile("io.jsonwebtoken:jjwt:${jwtVersion}")
        compile("com.alibaba:fastjson:${fastjsonVersion}")
        compile("commons-codec:commons-codec:${commonsVersion}")
        compile("org.springframework.data:spring-data-commons:${springDataVersion}")
        compile("org.apache.tomcat.embed:tomcat-embed-core:${embedVersion}")
        compile("org.springframework:spring-context:${springContextVersion}")
        implementation("com.squareup.okhttp3:okhttp:${okhttp3Version}")
        compile("org.apache.poi:poi-ooxml:${poiVersion}")
        compile("org.apache.commons:commons-lang3:${lang3Version}")
        compile("commons-io:commons-io:${commonsIoVersion}")
        compile("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
        compile("org.springframework:spring-web:${springContextVersion}")
        compileOnly("javax.servlet:servlet-api:2.5")
    }
}

project("eureka-server") {
    description = "eureka-server"
    mainClassName = 'com.custom.EkApplication'
    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server")
        compile("de.codecentric:spring-boot-admin-starter-client:2.0.3")
        compile("org.springframework.boot:spring-boot-starter-security")
    }
}

project("zipkin-server") {
    description = "zipkin-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("io.zipkin.java:zipkin-server:${zipkinVersion}")
                {
                    exclude group: 'log4j'
                    exclude group: 'org.slf4j'
                }

        compile("io.zipkin.java:zipkin-autoconfigure-ui:${zipkinVersion}")
    }
}

project("zuul-server") {
    description = "zuul-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-zuul")
        compile("io.springfox:springfox-swagger2:${swaggerVersion}")
        compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
        compile(project(":common-server"))
    }
}

project("user-server") {
    description = "user-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
        compile("org.springframework.cloud:spring-cloud-config-client")
        compile("net.logstash.logback:logstash-logback-encoder:${logstashVersion}")
        compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        runtime("mysql:mysql-connector-java")
        compile("com.alibaba:druid:${druidVersion}")
        compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-redis")
        compile("io.springfox:springfox-swagger2:${swaggerVersion}")
        compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard")
        compile("org.springframework.boot:spring-boot-starter-webflux")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("de.codecentric:spring-boot-admin-starter-client:2.0.3")
        runtime("org.springframework.boot:spring-boot-devtools")
        implementation("org.springframework.kafka:spring-kafka")
        compile(project(":common-server"))
    }
}

project("file-server") {
    description = "file-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
        compile("net.logstash.logback:logstash-logback-encoder:${logstashVersion}")
        compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        compile("net.sourceforge.jexcelapi:jxl:2.6.12")
        compile(project(":common-server"))
    }
}

project("config-server") {
    description = "config-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.boot:spring-boot-starter-jdbc")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("org.springframework.cloud:spring-cloud-config-server")
        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
        compile("mysql:mysql-connector-java")
        compile("net.logstash.logback:logstash-logback-encoder:${logstashVersion}")
        compile(project(":common-server"))
    }
}

project("auth-server") {
    description = "auth-server"
    mainClassName = 'com.custom.AuthApplication'
    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile(project(":common-server"))
    }
}


project("schedule-server") {
    description = "schedule-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("io.springfox:springfox-swagger2:${swaggerVersion}")
        compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-redis")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        runtime("mysql:mysql-connector-java")
        compile("com.alibaba:druid:${druidVersion}")
        compile(project(":common-server"))
    }
}

project("amqp-server") {
    description = "amqp-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.boot:spring-boot-starter-amqp")
        compile(project(":common-server"))
    }
}

project("payment-server") {
    description = "payment-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        compile(project(":common-server"))
    }
}

project("product-server") {
    description = "product-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
        compile("org.springframework.cloud:spring-cloud-config-client")
        compile("net.logstash.logback:logstash-logback-encoder:${logstashVersion}")
        compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        runtime("mysql:mysql-connector-java")
        compile("com.alibaba:druid:${druidVersion}")
        compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-redis")
        compile("io.springfox:springfox-swagger2:${swaggerVersion}")
        compile("io.springfox:springfox-swagger-ui:${swaggerVersion}")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-ribbon")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard")
        compile("org.springframework.boot:spring-boot-starter-webflux")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("de.codecentric:spring-boot-admin-starter-client:2.0.3")
        compile(project(":common-server"))
    }
}

project("admin-server") {

    description = "admin-server"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("de.codecentric:spring-boot-admin-starter-server:2.0.3")
        compile("de.codecentric:spring-boot-admin-server-ui:2.0.3")
        compile("org.springframework.boot:spring-boot-starter-mail")
        compile("org.jolokia:jolokia-core")
        compile("org.springframework.boot:spring-boot-starter-security")
    }
}

/**
 * 生成gradlew文件,统一gradle版本,避免因为版本不同产生的问题
 */
task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}
/**
 * 关闭父项目的打包功能
 */
bootJar {
    enabled = false
}
/**
 * 关闭父项目的打包功能
 */
jar {
    enabled = false
}
